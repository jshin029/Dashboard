{"ast":null,"code":"var _jsxFileName = \"/Users/johnshin/Projects/chart/src/components/Section3.js\";\nimport React, { component } from 'react';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport Chart from './Chart';\nimport Calendar from './Calendar';\n\nclass Section3 extends React.Component {\n  constructor() {\n    super();\n\n    this.BarClick = () => {\n      this.setState({\n        chartType: 'Bar'\n      });\n    };\n\n    this.LineClick = () => {\n      this.setState({\n        chartType: 'Line'\n      });\n    };\n\n    this.PieClick = () => {\n      this.setState({\n        chartType: 'Pie'\n      });\n    };\n\n    this.Sensor1 = () => {\n      this.setState({\n        device: 'Sensor_1',\n        chartBool: false,\n        chartData: {\n          labels: ['09-06', '09-07', '09-08', '09-09', '09-10', '09-11', '09-12', '09-13'],\n          datasets: [{\n            data: [225, 230, 235, 240, 248, 238, 233, 250],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        }\n      });\n    };\n\n    this.Sensor2 = () => {\n      this.setState({\n        device: 'Sensor_2',\n        chartBool: false,\n        chartData: {\n          labels: ['05-06', '05-07', '05-08', '05-09', '05-10', '05-11', '05-12', '05-13'],\n          datasets: [{\n            data: [300, 330, 270, 280, 290, 310, 330, 320],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        }\n      });\n    };\n\n    this.Sensor3 = () => {\n      this.setState({\n        device: 'Sensor_3',\n        chartBool: false,\n        chartData: {\n          labels: ['03-01', '03-02', '03-03', '03-04', '03-05', '03-06', '03-07', '03-08'],\n          datasets: [{\n            data: [220, 225, 235, 240, 250, 260, 270, 280],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        }\n      });\n    };\n\n    this.range = (start, end) => {\n      if (start != null && end != null) {\n        var starting = start.format().toString();\n        var ending = end.format().toString();\n        starting = starting.slice(5, 10);\n        ending = ending.slice(5, 10);\n        starting = starting.replace('-', '');\n        ending = ending.replace('-', '');\n      }\n\n      var x = null;\n      var temp = [];\n      var labels = this.state.chartData.labels; //filling temp array with current states date\n\n      for (var i = 0; i < this.state.chartData.labels.length; ++i) {\n        x = this.state.chartData.labels[i];\n        x = x.replace('-', '');\n        x = parseInt(x);\n        temp.push(x);\n      }\n\n      var temp2 = [];\n      var temp3 = []; //only getting the dates between the user's input\n\n      for (var i = 0; i < temp.length; ++i) {\n        if (temp[i] >= starting && temp[i] <= ending) {\n          temp3.push(i);\n        }\n      }\n\n      for (var i = 0; i < temp3.length; ++i) {\n        temp2.push(labels[temp3[i]]); //labels for all devices\n      }\n\n      var newData = [];\n      var deviceData = []; //parses data from each device based on user's range\n\n      for (var i = 0; i < this.state.chartData.datasets.length; ++i) {\n        for (var j = 0; j < temp3.length; ++j) {\n          newData.push(this.state.chartData.datasets[i].data[temp3[j]]); //data per device\n        }\n\n        deviceData.push(newData);\n        newData = [];\n      }\n\n      console.log(deviceData);\n      console.log(this.state.chartData);\n      this.setState({\n        chartExtract: {\n          labels: temp2,\n          datasets: [{\n            data: deviceData[0],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        },\n        chartBool: true\n      });\n    };\n\n    this.state = {\n      chartData: {},\n      chartExtract: {},\n      chartBool: false,\n      chartType: 'Bar',\n      device: 'Sensor_1',\n      units: 'Section3',\n      test: null,\n      focusedInput: null\n    };\n  }\n\n  componentWillMount() {\n    this.getChartData();\n  }\n\n  getChartData() {\n    //make ajax/axios call\n    this.setState({\n      chartData: {\n        labels: ['09-06', '09-07', '09-08', '09-09', '09-10', '09-11', '09-12', '09-13'],\n        datasets: [{\n          data: [225, 230, 235, 240, 248, 238, 233, 250],\n          backgroundColor: 'rgba(63, 63, 191, 0.6)'\n        }]\n      }\n    });\n  }\n\n  render() {\n    const falseFunc = () => false;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \" Select a Chart's format \"), React.createElement(\"button\", {\n      onClick: this.BarClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Bar\"), React.createElement(\"button\", {\n      onClick: this.LineClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Line\"), React.createElement(\"button\", {\n      onClick: this.PieClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Pie\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \" Select a Device \"), React.createElement(\"button\", {\n      onClick: this.Sensor1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Sensor_1\"), React.createElement(\"button\", {\n      onClick: this.Sensor2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Sensor_2\"), React.createElement(\"button\", {\n      onClick: this.Sensor3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Sensor_3\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \" Pick a date \"), React.createElement(Calendar, {\n      range: this.range,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Chart, {\n      chartData: this.state.chartBool ? this.state.chartExtract : this.state.chartData,\n      title: this.state.device,\n      chartType: this.state.chartType,\n      units: this.state.units,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default Section3;","map":{"version":3,"sources":["/Users/johnshin/Projects/chart/src/components/Section3.js"],"names":["React","component","DateRangePicker","SingleDatePicker","DayPickerRangeController","Chart","Calendar","Section3","Component","constructor","BarClick","setState","chartType","LineClick","PieClick","Sensor1","device","chartBool","chartData","labels","datasets","data","backgroundColor","Sensor2","Sensor3","range","start","end","starting","format","toString","ending","slice","replace","x","temp","state","i","length","parseInt","push","temp2","temp3","newData","deviceData","j","console","log","chartExtract","units","test","focusedInput","componentWillMount","getChartData","render","falseFunc"],"mappings":"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","sourcesContent":["import React, {component} from 'react';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport Chart from './Chart';\nimport Calendar from './Calendar';\n\nclass Section3 extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData: {} ,\n      chartExtract: {},\n      chartBool: false,\n      chartType:'Bar',\n      device: 'Sensor_1',\n      units: 'Section3',\n      test: null,\n      focusedInput: null\n    }\n  }\n\n    componentWillMount() {\n      this.getChartData();\n    }\n\n    getChartData () {\n      //make ajax/axios call\n        this.setState({\n\n          chartData:{\n              labels: ['09-06', '09-07', '09-08', '09-09', '09-10', '09-11', '09-12', '09-13'],\n              datasets: [\n                {\n                  data:[225, 230, 235, 240, 248, 238, 233, 250],\n                  backgroundColor: 'rgba(63, 63, 191, 0.6)'\n                }\n              ]\n          }\n        });\n\n    }\n    BarClick = () => {\n      this.setState({chartType:'Bar'});\n    }\n\n    LineClick = () => {\n      this.setState({chartType:'Line'});\n    }\n\n    PieClick = () => {\n      this.setState({chartType:'Pie'});\n    }\n\n    Sensor1 = () => {\n      this.setState({\n        device:'Sensor_1',\n        chartBool: false,\n        chartData:{\n            labels: ['09-06', '09-07', '09-08', '09-09', '09-10', '09-11', '09-12', '09-13'],\n            datasets: [\n              {\n                data:[225, 230, 235, 240, 248, 238, 233, 250],\n                backgroundColor:'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n        }\n\n      });\n    }\n\n    Sensor2 = () => {\n      this.setState({\n        device:'Sensor_2',\n        chartBool: false,\n        chartData:{\n            labels: ['05-06', '05-07', '05-08', '05-09', '05-10', '05-11', '05-12', '05-13'],\n            datasets: [\n              {\n                data:[300, 330, 270, 280, 290, 310, 330, 320],\n                backgroundColor: 'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n        }\n      });\n    }\n\n    Sensor3 = () => {\n      this.setState({\n        device:'Sensor_3',\n        chartBool: false,\n        chartData:{\n            labels: ['03-01', '03-02', '03-03', '03-04', '03-05', '03-06', '03-07', '03-08'],\n            datasets: [\n              {\n                data:[220, 225, 235, 240, 250, 260, 270, 280],\n                backgroundColor: 'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n        }\n      });\n    }\n\n    range = (start, end) => {\n      if (start != null && end != null){\n        var starting = start.format().toString();\n        var ending = end.format().toString();\n\n        starting = starting.slice(5,10);\n        ending = ending.slice(5,10);\n\n        starting = starting.replace('-', '');\n        ending = ending.replace('-', '');\n      }\n\n      var x = null;\n      var temp = [];\n      var labels = this.state.chartData.labels;\n        //filling temp array with current states date\n        for (var i = 0; i < this.state.chartData.labels.length; ++i){\n          x =  this.state.chartData.labels[i];\n          x = x.replace('-','');\n          x = parseInt(x);\n          temp.push(x);\n        }\n        var temp2 = [];\n        var temp3 = [];\n\n        //only getting the dates between the user's input\n        for (var i = 0; i < temp.length; ++i){\n          if (temp[i] >= starting && temp[i] <= ending){\n            temp3.push(i);\n          }\n        }\n\n        for (var i = 0; i < temp3.length; ++i){\n          temp2.push(labels[temp3[i]]); //labels for all devices\n        }\n\n        var newData = [];\n        var deviceData = [];\n\n        //parses data from each device based on user's range\n        for (var i = 0; i < this.state.chartData.datasets.length; ++i){\n          for (var j = 0; j < temp3.length; ++j){\n            newData.push(this.state.chartData.datasets[i].data[temp3[j]]); //data per device\n          }\n          deviceData.push(newData);\n          newData = [];\n        }\n        console.log(deviceData);\n        console.log(this.state.chartData);\n\n        this.setState({chartExtract: {\n            labels: temp2,\n            datasets: [\n              {\n                data: deviceData[0],\n                backgroundColor: 'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n          },\n          chartBool: true\n        });\n  }\n  render() {\n    const falseFunc = ()=>false;\n    return (\n      <div>\n        <div>\n          <p> Select a Chart's format </p>\n          <button onClick={this.BarClick}>Bar</button>\n          <button onClick={this.LineClick}>Line</button>\n          <button onClick={this.PieClick}>Pie</button>\n\n          <p> Select a Device </p>\n          <button onClick={this.Sensor1}>Sensor_1</button>\n          <button onClick={this.Sensor2}>Sensor_2</button>\n          <button onClick={this.Sensor3}>Sensor_3</button>\n\n          <p> Pick a date </p>\n          <Calendar range={this.range}/>\n\n          <Chart chartData = {this.state.chartBool ? this.state.chartExtract: this.state.chartData} title={this.state.device} chartType={this.state.chartType} units={this.state.units}/>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Section3;\n"]},"metadata":{},"sourceType":"module"}