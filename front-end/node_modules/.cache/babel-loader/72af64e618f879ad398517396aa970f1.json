{"ast":null,"code":"var _jsxFileName = \"/Users/johnshin/Projects/chart/src/components/Section3.js\";\nimport React, { component } from 'react';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport Chart from './Chart';\nimport Calendar from './Calendar';\n\nclass Section3 extends React.Component {\n  constructor() {\n    super();\n\n    this.BarClick = () => {\n      this.setState({\n        chartType: 'Bar'\n      });\n    };\n\n    this.LineClick = () => {\n      this.setState({\n        chartType: 'Line'\n      });\n    };\n\n    this.PieClick = () => {\n      this.setState({\n        chartType: 'Pie'\n      });\n    };\n\n    this.Sensor1 = () => {\n      this.setState({\n        device: 'Sensor_1',\n        chartData: {\n          labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n          datasets: [{\n            data: [200, 250, 279, 300, 257, 325, 350, 150],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        }\n      });\n    };\n\n    this.Sensor2 = () => {\n      this.setState({\n        device: 'Sensor_2',\n        chartData: {\n          labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n          datasets: [{\n            data: [300, 330, 270, 280, 290, 310, 330, 320],\n            backgroundColor: 'rgba(63, 63, 191, 0.6)'\n          }]\n        }\n      });\n    };\n\n    this.range = (start, end) => {\n      if (start != null && end != null) {\n        this.setState({\n          startDate: start.format('MMM-DD'),\n          endDate: end.format('MMM-DD')\n        });\n      }\n    };\n\n    this.toggle = () => {\n      if (this.state.celsius == null) {\n        this.setState({\n          celsius: false\n        });\n      } else {\n        this.setState(prevState => ({\n          celsius: !prevState.celsius\n        }));\n      }\n    };\n\n    this.state = {\n      chartData: {},\n      chartType: 'Bar',\n      startDate: '',\n      endDate: '',\n      device: 'Sensor_1',\n      units: 'Section3',\n      celsius: null,\n      focusedInput: null\n    };\n  }\n\n  componentWillMount() {\n    this.getChartData();\n  }\n\n  getChartData() {\n    //make ajax/axios call\n    this.setState({\n      chartData: {\n        labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n        datasets: [{\n          data: [200, 250, 279, 300, 257, 325, 350, 150],\n          backgroundColor: 'rgba(63, 63, 191, 0.6)'\n        }]\n      }\n    });\n  }\n\n  render() {\n    if (this.state.celsius) {\n      var temp = [];\n\n      for (var i = 0; i < this.state.chartData.datasets.length; ++i) {\n        temp = this.state.chartData.datasets[i].data;\n\n        for (var j = 0; j < this.state.chartData.datasets[i].data.length; ++j) {\n          temp[j] = temp[j] * 9 / 5 + 32;\n        }\n      }\n    } else {\n      var temp = [];\n\n      for (var i = 0; i < this.state.chartData.datasets.length; ++i) {\n        temp = this.state.chartData.datasets[i].data;\n\n        for (var j = 0; j < this.state.chartData.datasets[i].data.length; ++j) {\n          temp[j] = (temp[j] - 32) * 5 / 9;\n        }\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" Select a Chart's format \"), React.createElement(\"button\", {\n      onClick: this.BarClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Bar\"), React.createElement(\"button\", {\n      onClick: this.LineClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Line\"), React.createElement(\"button\", {\n      onClick: this.PieClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Pie\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \" Select a Device \"), React.createElement(\"button\", {\n      onClick: this.Sensor1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Sensor_1\"), React.createElement(\"button\", {\n      onClick: this.Sensor2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Sensor_2\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \" Toggle Celsius and Fahrenheit \"), React.createElement(\"button\", {\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"toggle\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \" Pick a date \"), React.createElement(Calendar, {\n      range: this.range,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Chart, {\n      chartData: this.state.chartData,\n      title: this.state.device,\n      chartType: this.state.chartType,\n      units: this.state.units,\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      celsius: this.state.celsius,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default Section3;","map":{"version":3,"sources":["/Users/johnshin/Projects/chart/src/components/Section3.js"],"names":["React","component","DateRangePicker","SingleDatePicker","DayPickerRangeController","Chart","Calendar","Section3","Component","constructor","BarClick","setState","chartType","LineClick","PieClick","Sensor1","device","chartData","labels","datasets","data","backgroundColor","Sensor2","range","start","end","startDate","format","endDate","toggle","state","celsius","prevState","units","focusedInput","componentWillMount","getChartData","render","temp","i","length","j"],"mappings":"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","sourcesContent":["import React, {component} from 'react';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport Chart from './Chart';\nimport Calendar from './Calendar';\n\nclass Section3 extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData: {} ,\n      chartType:'Bar',\n      startDate: '',\n      endDate: '',\n      device: 'Sensor_1',\n      units: 'Section3',\n      celsius: null,\n      focusedInput: null\n    }\n  }\n\n    componentWillMount() {\n      this.getChartData();\n    }\n\n    getChartData () {\n      //make ajax/axios call\n        this.setState({\n          chartData:{\n              labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n              datasets: [\n                {\n                  data:[200, 250, 279, 300, 257, 325, 350, 150],\n                  backgroundColor:'rgba(63, 63, 191, 0.6)'\n                }\n              ]\n          }\n        });\n\n    }\n    BarClick = () => {\n      this.setState({chartType:'Bar'});\n    }\n\n    LineClick = () => {\n      this.setState({chartType:'Line'});\n    }\n\n    PieClick = () => {\n      this.setState({chartType:'Pie'});\n    }\n\n    Sensor1 = () => {\n      this.setState({\n        device:'Sensor_1',\n        chartData:{\n            labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n            datasets: [\n              {\n                data:[200, 250, 279, 300, 257, 325, 350, 150],\n                backgroundColor:'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n        }\n      });\n    }\n\n    Sensor2 = () => {\n      this.setState({\n        device:'Sensor_2',\n        chartData:{\n            labels: [\"Jun-06\", \"Jun-07\", \"Jun-08\", \"Jun-09\", \"Jun-10\", \"Jun-11\", \"Jun-12\", \"Jun-13\"],\n            datasets: [\n              {\n                data:[300, 330, 270, 280, 290, 310, 330, 320],\n                backgroundColor: 'rgba(63, 63, 191, 0.6)'\n              }\n            ]\n        }\n      });\n    }\n\n  range = (start, end) => {\n    if (start != null && end != null){\n      this.setState({\n        startDate: start.format('MMM-DD'),\n        endDate: end.format('MMM-DD')\n      })\n\n    }\n  }\n\n  toggle = () => {\n    if (this.state.celsius == null){\n      this.setState({ celsius: false});\n    }\n    else{\n    this.setState(prevState => ({ celsius: !prevState.celsius }));\n  }\n  }\n\n  render() {\n    if (this.state.celsius){\n      var temp = [];\n      for (var i = 0; i < this.state.chartData.datasets.length; ++i){\n        temp = this.state.chartData.datasets[i].data\n        for (var j = 0; j < this.state.chartData.datasets[i].data.length; ++j){\n          temp[j] = (temp[j] * 9/5) + 32;\n        }\n      }\n    }\n\n    else {\n      var temp = [];\n      for (var i = 0; i < this.state.chartData.datasets.length; ++i){\n        temp = this.state.chartData.datasets[i].data\n        for (var j = 0; j < this.state.chartData.datasets[i].data.length; ++j){\n          temp[j] = (temp[j] - 32) * 5/9 ;\n        }\n      }\n    }\n\n    return (\n      <div>\n        <div>\n          <p> Select a Chart's format </p>\n          <button onClick={this.BarClick}>Bar</button>\n          <button onClick={this.LineClick}>Line</button>\n          <button onClick={this.PieClick}>Pie</button>\n\n          <p> Select a Device </p>\n          <button onClick={this.Sensor1}>Sensor_1</button>\n          <button onClick={this.Sensor2}>Sensor_2</button>\n\n          <p> Toggle Celsius and Fahrenheit </p>\n          <button onClick={this.toggle}>toggle</button>\n\n          <p> Pick a date </p>\n          <Calendar range={this.range}/>\n\n          <Chart chartData = {this.state.chartData} title={this.state.device} chartType={this.state.chartType} units={this.state.units} startDate={this.state.startDate} endDate={this.state.endDate} celsius={this.state.celsius}/>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Section3;\n"]},"metadata":{},"sourceType":"module"}